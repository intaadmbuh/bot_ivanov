require('dotenv').config()
const {Bot, GrammyError, HttpError, InputFile, Keyboard, Context, InlineKeyboard, session} = require('grammy')
const {run} = require("@grammyjs/runner");//
const {hydrate} = require('@grammyjs/hydrate')
const {apiThrottler} = require("@grammyjs/transformer-throttler");//https://grammy.dev/plugins/transformer-throttler
const {limit} = require("@grammyjs/ratelimiter");//https://grammy.dev/plugins/ratelimiter
const {FileFlavor, hydrateFiles} = require("@grammyjs/files")
const {conversations, createConversation,} = require("@grammyjs/conversations");//npm install grammyjs/conversations
const {DbConnect} = require('./MODULES/BD/PG/PG_CONNECT')
const {DataTypes, Op} = require("sequelize");
let distance = require("gps-distance");//npm i gps-distance
const {busStops} = require('./MODULES/BUS_STOP/bus_stops')
const bot = new Bot(process.env.BOT_API_KEY)//–°–û–ó–î–ê–ï–ú –ë–û–¢–ê
bot.use(hydrate())
bot.use(limit())
const throttler = apiThrottler()
bot.api.config.use(throttler)//–∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. —Ç—É—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
bot.api.config.use(hydrateFiles(process.env.BOT_API_KEY));// https://grammy.dev/plugins/transformer-throttler   - –ø–æ—á–∏—Ç–∞—Ç—å –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
bot.use(session({initial: () => ({})}));
bot.use(conversations());// https://grammy.dev/plugins/conversations
const {logger, timestamp} = require("./MODULES/LOGGER/LOGGER");
const {Logger_Func} = require("./MODULES/LOGGER/LOGGER_FUNC");
const {My_Func} = require("./MODULES/FUNC/MY_FUNC");
const {File_Func} = require('./MODULES/FILES/FILES_FUNC')
const {Tables} = require("./MODULES/BD/PG/TABLES");
const {TablesModels} = require("./MODULES/BD/PG/TABLES_MODELS");
const {Table_Func} = require("./MODULES/BD/PG/TABLES_FUNC");
const {clMenu} = require('./MODULES/MENU/MENU_BOTTOM/MENU_BOTTOM')
const {MenuHamburger} = require('./MODULES/MENU/MENU_BOTTOM/MENU_HAMBURGER')
const {Menu_Func} = require("./MODULES/MENU/MENU_BOTTOM/MENU_FUNC");
const {create} = require("axios");
const {AbortSignal} = require("@grammyjs/hydrate/out/shim.node");
const {clBtnMenuAdmin} = require('./MODULES/MENU/MENU_ADMIN/M_CLASS_BTN')
const {M_BTN_FUNC} = require('./MODULES/MENU/MENU_ADMIN/M_BTNS_FUNC')
const {clMenuBtns, clMenuBtnsTogether} = require("./MODULES/MENU/MENU_ADMIN/M_CLASS_PANEL");
const schedule = require('node-schedule');
const readXlsxFile = require("read-excel-file/node");
//https://github.com/node-schedule/node-schedule
//**********************************************–û–ü–†–ï–î–ï–õ–ò–õ–ò –í–°–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï**********************************************************************
async function greeting(conversation, ctx) {//–§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–£–ù–ö–¶–ò–ô –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
		const numBtn = +ctx.callbackQuery.data
		if (typeof (myMenuOdj.mapBtnsAll.get(numBtn)) == 'undefined') {
				ctx.reply('–ú–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /adminMenu')
				return
		}
		const msg = myMenuOdj.mapBtnsAll.get(numBtn).msg

		await ctx.reply(msg)
		// const {message} = await conversation.wait();
		if (numBtn != 200) {//–µ—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
				if (!myMenuOdj.mapMenuAll.has(numBtn)) {//–µ—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
						await myMenuOdj.mapBtnsAll.get(numBtn)._toDoSomething(conversation, ctx, dataAdminPanelBtns)
				}
		}

		const menu = myMenuOdj._stackMenuUpdate(numBtn)//—Ñ—É–Ω–∫—Ü–∏—è greeting –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å—è 2 —Ä–∞–∑–∞. –ø–æ—ç—Ç–æ–º—É —ç—Ç—É –ø–µ—Ä–º–µ–Ω–Ω—É—é –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		if (menu)
				await ctx.reply('–í–Ω–∏–º–∞–Ω–∏–µ!!! –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í —ç—Ç–æ–º –º–µ–Ω—é —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–¥–µ—é—Å—å —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—à—å'
						, {reply_markup: InlineKeyboard.from(menu)})
		else
				await ctx.reply('–ó–∞–∫—Ä—ã–ª –º–µ–Ω—é –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						, {reply_markup: {remove_keyboard: true}})

		return//–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞—Ç—å. —Ç–∞–∫ –∫–∞–∫ –±–µ—Å–µ–¥–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
}//–§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–£–ù–ö–¶–ò–ô –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
bot.use(createConversation(greeting));//–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò

//–ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ
const mapUsersMenuBottonMain = new Map()//–¢–£–¢ –ë–£–î–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –ú–ï–ù–Æ –í–°–ï–• –ü–û–õ–¨–ó–í–ê–¢–ï–õ–ï–ô
//–¢–£–¢ –ë–£–î–ï–¢ –•–†–ê–ù–ò–¢–¨ –ú–ï–ù–Æ –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

//–ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ
async function setMenuBottom(user_ID) {
		const MenuBottomMain = new clMenu(Tables.Mod.MENU_MAIN)
		const MenuBottomMisc = new clMenu(Tables.Mod.MENU_MISC)
		const MenuBottomNearest = new clMenu(Tables.Mod.MENU_NEAREST)

		const MenuBottomSchedulesOld = new clMenu(Tables.Mod.MENU_SCHEDULE_OLD)
		const MenuBottomSchedulesNew = new clMenu(Tables.Mod.MENU_SCHEDULE_NEW)
		const MenuBottomChoceSch = new clMenu(Tables.Mod.MENU_SW_OLD_NEW_SCH)

		let init = await MenuBottomMain.init()
		if (init) {
				await MenuBottomMisc.init()
				await MenuBottomNearest.init()

				await MenuBottomMain.register('üîë', MenuBottomMisc)
				await MenuBottomMain.register('‚è±Ô∏è–ë–ª–∏–∂–∞–π—à–∏–π', MenuBottomNearest)
				init = await MenuBottomSchedulesOld.init()
				if (init) {
						init = await MenuBottomSchedulesNew.init()
						if (init) {
								await MenuBottomChoceSch.init()
								await MenuBottomMain.register('üöå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', MenuBottomChoceSch)
								await MenuBottomMain.register('üöå –î–µ–π—Å—Ç–≤—É—é—â–µ–µ', MenuBottomSchedulesOld)
								await MenuBottomMain.register('‚ö†Ô∏è –ù–æ–≤–æ–µ', MenuBottomSchedulesNew)
						} else {
								await MenuBottomMain.register('üöå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', MenuBottomSchedulesOld)
						}
				}
		}
		MenuBottomMain.redefineBtn('üìç –ì–¥–µ –∞–≤—Ç–æ–±—É—Å')//–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–Ω–æ–ø–∫—É
		MenuBottomMain.redefineBtn('Ô∏èü§†‚û°Ô∏èüê™')
		MenuBottomMain.redefineBtn('üê™‚û°Ô∏èü§†')
		MenuBottomMain.setActive()

		mapUsersMenuBottonMain.set(+user_ID, MenuBottomMain)
}//–ó–ê–ü–û–õ–ù–Ø–ï–ú –î–ê–ù–ù–´–ú–ò –ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function changeMenuBottom(ctx, obj) {
		const user_ID = ctx.chat.id
		await setMenuBottom(user_ID)
		await setMenuBottom(user_ID)

		await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?', {
				reply_markup: Keyboard.from(obj.get(user_ID).KEYBOARD_STACK.at(-1)).resized(),
				is_persistent: true
		})
}

//–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
const dataAdminPanelBtns = {
		MENU_SCHEDULE_NEW: Tables.Mod.MENU_SCHEDULE_NEW,
		MENU_SCHEDULE_OLD: Tables.Mod.MENU_SCHEDULE_OLD,
		MENU_MAIN: Tables.Mod.MENU_MAIN,
		TABLE_USERS: Tables.Mod.USERS,
		DAY_OFF: Tables.Mod.DAY_OFF,
		SCHEDULES: Tables.Mod.SCHEDULES,
		YEAR_SCHEDULES: Tables.Mod.YEAR_SCHEDULES,
		BOT: bot,
		MENU: mapUsersMenuBottonMain,
		RESET_MENU: setMenuBottom
}//–û–ë–™–ï–ö–¢ –î–õ–Ø –ü–ï–†–ï–î–ê–ß–ò –î–ê–ù–ù–´–• –í –§–£–ù–ö–¶–ò–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò

const myMenuOdj = new clMenuBtnsTogether()//–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
const myMenu1 = new clMenuBtns()//–ø–µ—Ä–≤–æ–µ –º–µ–Ω—é
const myMenu2 = new clMenuBtns()//–ø–µ—Ä–≤–æ–µ –º–µ–Ω—é
const myMenu3 = new clMenuBtns()//–≤—Ç–æ—Ä–æ–µ –º–µ–Ω—é
const myMenu4 = new clMenuBtns()//—Ç—Ä–µ—Ç—å–µ –º–µ–Ω—é
const myMenu5 = new clMenuBtns()//—Ç—Ä–µ—Ç—å–µ –º–µ–Ω—é
const setAdminPanel = async () => {
		const arrBtns = []
		myMenuOdj._clearAllData()
		myMenu1._clearAllData()
		myMenu2._clearAllData()
		myMenu3._clearAllData()
		myMenu4._clearAllData()
		const {count, rows} = await Tables.Mod.ADMIN_PANEL_BTNS.findAndCountAll({
				order: [["num", "ASC"]]//—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
		})
		for (let i = 0; i < count; i++) {
				btn = new clBtnMenuAdmin()
				btn.num = +rows[i].num
				btn.caption = rows[i].caption
				btn.msg = rows[i].msg
				btn._toDoSomething = M_BTN_FUNC[i]
				arrBtns.push(btn)
		}
		myMenu1._registerBtns(arrBtns[0], arrBtns[1], arrBtns[2], arrBtns[3], arrBtns[4], arrBtns[12], arrBtns.at(-1))
		myMenu2._registerBtns(arrBtns[5], arrBtns[6], arrBtns[7], arrBtns[8], arrBtns.at(-1))
		myMenu2._setJumpBtn(arrBtns[3])
		myMenu3._registerBtns(arrBtns[9], arrBtns[10], arrBtns[11], arrBtns.at(-1))
		myMenu3._setJumpBtn(arrBtns[4])
		myMenu4._registerBtns(arrBtns[13], arrBtns[14], arrBtns[15], arrBtns[16], arrBtns[17], arrBtns[18],arrBtns[19], arrBtns.at(-1))
		myMenu4._setJumpBtn(arrBtns[12])
		myMenuOdj._init(myMenu1, myMenu2, myMenu3, myMenu4)
}//–ó–ê–ü–û–õ–ù–Ø–ï–ú –î–ê–ù–ù–´–ú–ò –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
const start = async () => {
		try {
				await DbConnect.authenticate()
				// –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å
				// await DbConnect.sync({alter: true})//https://sequelize.org/docs/v6/core-concepts/model-basics/
				await DbConnect.sync()
				logger.info(`[–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø -start],
        [–°–£–ü–ï–†!! –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–û–®–õ–û –£–°–ü–ï–®–ù–û.]`)
		} catch (e) {
				logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø -start],
        [–ö–ê–ö–ê–Ø –¢–û –•–ï–†–ù–Ø –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ö –ë–ê–ó–ï]
        err - ${e}`)
		}

		await Table_Func._tablesAdminPanelBtnsInit()
		await Tables.Func._tablesMenuInit()
		const rec = await Tables.Mod.USERS.findAll({
				where: {
						active: true
				}
		})
		if (rec === null) {
		} else
				for (let jsonKey in rec) {
						await setMenuBottom(rec[jsonKey].user_id)
						await setMenuBottom(rec[jsonKey].user_id)
				}
		await My_Func._sendNews('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ–Ω–∏—è –±–æ—Ç–∞', dataAdminPanelBtns)
};//–ó–î–ï–°–¨ –î–ï–õ–ê–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–î + –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ –ò –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

bot.api.setMyCommands(MenuHamburger)//–°–û–ó–î–ê–ï–ú –ú–ï–ù–Æ –ë–£–ì–†–ï–†

bot.command(process.env.COMMAND_MENU, async (ctx) => {
		await changeMenuBottom(ctx, mapUsersMenuBottonMain)
		await Tables.Func._dbAddUser(ctx, Tables.Mod.USERS)//–î–û–ë–ê–í–ò–õ–ò –Æ–ó–ï–†–ê –í –ë–ê–ó–£//–°–û–ë–ò–†–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
})
bot.command(process.env.COMMAND_START, async (ctx) => {
		await changeMenuBottom(ctx, mapUsersMenuBottonMain)
		await ctx.replyWithPhoto(new InputFile('./src/pic/COMMAND_START.jpg')
				, {caption: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–∞–∑—è'})
		await File_Func._sendMsgFromFile('./src/text/COMMAND_START.txt', ctx)
		await Tables.Func._dbAddUser(ctx, Tables.Mod.USERS)//–î–û–ë–ê–í–ò–õ–ò –Æ–ó–ï–†–ê –í –ë–ê–ó–£//–°–û–ë–ò–†–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
})
bot.command(process.env.COMMAND_HELP, async (ctx) => {
		await My_Func._helpUser(ctx, './src/mp4/command_help.mp4', '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —Å–∫—Ä—ã—Ç—ã', './src/text/command_help.txt')
		await Tables.Func._dbAddUser(ctx, Tables.Mod.USERS)//–î–û–ë–ê–í–ò–õ–ò –Æ–ó–ï–†–ê –í –ë–ê–ó–£//–°–û–ë–ò–†–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
})
bot.command(process.env.COMMAND_SHARE, async (ctx) => {
		var But_Reflink = {
				reply_markup: JSON.stringify({
						inline_keyboard: [
								[{
										text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º',
										// callback_data: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º',
										switch_inline_query: '–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤ –≤ –≥. –ò–Ω—Ç–∞'
								}]
						]
				})
		}
// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
		await ctx.reply('–•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?', But_Reflink)
		await Tables.Func._dbAddUser(ctx, Tables.Mod.USERS)//–î–û–ë–ê–í–ò–õ–ò –Æ–ó–ï–†–ê –í –ë–ê–ó–£//–°–û–ë–ò–†–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
})

//-----
bot.command(process.env.COMMAND_CARD, async (ctx) => {
		const msg = ctx.message.text.slice(process.env.COMMAND_SEND_NEWS.length + 2, ctx.message.text.length) //–≤—ã—Ä–µ–∑–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—É
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id))
						await ctx.replyWithPhoto(new InputFile('./src/pic/card.jpg')
								, {caption: '–ö–∞—Ä—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞'})
})
bot.command(process.env.COMMAND_SEND_NEWS, async (ctx) => {
		const msg = ctx.message.text.slice(process.env.COMMAND_SEND_NEWS.length + 2, ctx.message.text.length) //–≤—ã—Ä–µ–∑–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—É
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						const rec = await Tables.Mod.USERS.findAll({
								where: {
										active: true
								}
						})
						if (rec === null) {
						} else
								for (let jsonKey in rec) {
										await setMenuBottom(rec[jsonKey].user_id)
										await setMenuBottom(rec[jsonKey].user_id)
								}
						await My_Func._sendNews(msg, dataAdminPanelBtns)
				}
})
bot.command(process.env.COMMAND_SEND_MSG_TO_ONE_USER, async (ctx) => {
		const msg = ctx.message.text.slice(process.env.COMMAND_SEND_MSG_TO_ONE_USER.length + 2, ctx.message.text.length) //–≤—ã—Ä–µ–∑–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—É
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id))
						await My_Func._sendMsgToUser(bot, msg, Tables.Mod.USERS)
})
bot.command(process.env.COMMAND_GET_STATISTIC, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id))
						await My_Func._getStatistic(ctx, Tables.Mod.USERS)
})
bot.command(process.env.COMMAND_ADMIN_MENU, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						await setAdminPanel()
						await ctx.reply('–í–Ω–∏–º–∞–Ω–∏–µ!!! –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í —ç—Ç–æ–º –º–µ–Ω—é —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–¥–µ—é—Å—å —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—à—å'
								, {reply_markup: InlineKeyboard.from(myMenuOdj._stackMenuUpdate())})
				}
})
bot.command(process.env.COMMAND_ADMIN_MENU_CANCEL, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						await ctx.conversation.exit("greeting")
						await ctx.reply('–ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
				} else await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
})
bot.command(process.env.COMMAND_RENDER_MENU, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						arrDatesFromAllTables = []
						for (let property in Tables.Mod) {//–ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–ª–∏—á–∏—è –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ—Ç –≤ —Å—Ç–æ–±–ª–∏–∫–µ date
								try {
										switch (Tables.Mod[property]) {
												case Tables.Mod.DAY_OFF://—ç—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –≤–Ω–µ—Å–µ–º –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
												case Tables.Mod.SCHEDULES:
														break
												default:
														const allRecordsInTheTable = await Tables.Mod[property].findAll({
																where: {
																		date: {[Op.ne]: null}
																}
														})
														for (let record of allRecordsInTheTable)
																arrDatesFromAllTables.push(record.date)
														break
										}
								} catch {
								}
						}

						arrUniqueDates = []
						for (let date of arrDatesFromAllTables)
								if (!My_Func._isDateInArray(date, arrUniqueDates))
										arrUniqueDates.push(date)

						ctx.reply('–î–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü –∏ –º–µ–Ω—é')
						schedule.gracefulShutdown()
						for (let i of arrUniqueDates) {
								schedule.scheduleJob(i, async () => {
										const rec = await Tables.Mod.USERS.findAll({
												where: {
														active: true
												}
										})
										if (rec === null) {
										} else
												for (let jsonKey in rec) {
														await setMenuBottom(rec[jsonKey].user_id)
														await setMenuBottom(rec[jsonKey].user_id)
												}
										await My_Func._sendNews('–†—ç–Ω–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', dataAdminPanelBtns)
								})
								ctx.reply(i.toLocaleString())
						}
				}
})
bot.command(process.env.COMMAND_REMOVE_RENDER_MENU, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						schedule.gracefulShutdown()
						ctx.reply('–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä—ç–Ω–¥–µ—Ä —É–¥–∞–ª–µ–Ω—ã')
				}
})
bot.command(process.env.COMMAND_CMD_HELP, async (ctx) => {
		if (ctx.chat.type === "private")
				if (process.env.BOT_ADMIN.includes(ctx.from.id)) {
						await File_Func._sendMsgFromFile('./src/text/cmd_help.txt', ctx)
				} else await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
})


bot.on("callback_query:data", async (ctx) => {
		try {
				await ctx.callbackQuery.message.delete()
		} catch (e) {
				ctx.reply('–¢—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ-–º–µ–¥–ª–µ–Ω–Ω–µ–π')
				return
		}
		await ctx.conversation.enter("greeting")
});//–¢–£–¢ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
bot.on(":text", async (ctx) => {
		await Tables.Func._dbAddUser(ctx, Tables.Mod.USERS)//–î–û–ë–ê–í–ò–õ–ò –Æ–ó–ï–†–ê –í –ë–ê–ó–£//–°–û–ë–ò–†–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£

		const user_ID = ctx.chat.id
		if (!mapUsersMenuBottonMain.has(user_ID))
				await changeMenuBottom(ctx, mapUsersMenuBottonMain)

		const resHear = await mapUsersMenuBottonMain.get(user_ID)?.hear(ctx)
		if (resHear === 0) {
				const samePhrase = My_Func._isCloseInContent(ctx.message.text, My_Func.arrUserMessages, +process.env.CLOSE_TO_CONTEX_DISTANCE)
				if (samePhrase)
						await File_Func._sendMsgFromFile('./src/text/reference_help.txt', ctx)

				await Tables.Func._dbAddUserMsg(ctx, Tables.Mod.MSG)
				if (!process.env.BOT_ADMIN.includes(user_ID)) {
						if (await Tables.Func._dbIsUser(user_ID, Tables.Mod.BLACK_LIST) == false) {
								//						for (let i = 0; i < process.env.BOT_ADMIN.length; i++)//—ç—Ç–æ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –æ–ø—Ç–∞–≤–ª—è—Ç—å –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
								const adminID = JSON.parse(process.env.BOT_ADMIN)
								await bot.api.sendMessage(adminID[0], ctx.message.from.id)
								await bot.api.sendMessage(adminID[0], ctx.message.text)
						}
				}
		} else {
				let msg = null
				switch (resHear) {
						case 'üìç –ì–¥–µ –∞–≤—Ç–æ–±—É—Å'://—ç—Ç–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
								await My_Func._getLocationBtn(ctx)
								await Tables.Func._db_CountCmd(ctx, Tables.Mod.COUNT)
								break
						case 'üê™‚û°Ô∏èü§†':
								//–∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–∞–ª —Ç—É—Ç https://xmlcalendar.ru/
								msg = await My_Func._getSchedule(dataAdminPanelBtns, +process.env.NEAREST_BUS_MINUTES, false)
								await ctx.reply(msg === null ? '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã' : msg)
								await Tables.Func._db_CountCmd(ctx, Tables.Mod.COUNT)
								break
						case 'Ô∏èü§†‚û°Ô∏èüê™':
								msg = await My_Func._getSchedule(dataAdminPanelBtns, +process.env.NEAREST_BUS_MINUTES)
								await ctx.reply(msg === null ? '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã' : msg)
								await Tables.Func._db_CountCmd(ctx, Tables.Mod.COUNT)
								break
						case 2:
						case 3:
						case 4:
								await Tables.Func._db_CountCmd(ctx, Tables.Mod.COUNT)
								break
						default:
								break;
				}
		}
})//–¢–£–¢ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ –ò –í–°–ï –í–õ–û–ñ–ï–ù–ù–´–ï –í –ù–ï–ì–û –ú–ï–ù–Æ

bot.on('message', async (ctx) => {
		if (ctx.message.location.latitude !== undefined && ctx.message.location.longitude !== undefined) {
				let result = 0
				let arrDist = []
				for (let i = 0; i < busStops.length; i++) {
						result = distance(ctx.message.location.latitude, ctx.message.location.longitude, busStops[i].lat, busStops[i].lng)
						arrDist.push(result)
				}
				let minDist = Math.min(...arrDist)
				let index = arrDist.indexOf(Math.min(...arrDist))

				await ctx.reply(busStops[index].ref, {
						reply_markup:
								{
										remove_keyboard: true
								}
				})
				if (minDist <= 9.9) await ctx.reply('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ = ' + ' ' + (minDist * 1000).toFixed(2) + ' –º')
				else await ctx.reply('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ = ' + ' ' + minDist.toFixed(2) + ' –∫–º')

				await Tables.Func._dbAddUserLoc(ctx, Tables.Mod.LOC, minDist.toFixed(4), busStops[index].name)
		}
})

bot.catch((err) => {
		const ctx = err.ctx;
		const e = err.error;
		logger.error(`[${My_Func._getDateTime()}],
				[–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø - bot.catch],
				[Error while handling update: ${ctx.update.update_id}]`)
		if (e instanceof GrammyError) {
				logger.error(`[${My_Func._getDateTime()}],
				[–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø - bot.catch],
				[–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: ${e.description}]`)
		} else if (e instanceof HttpError) {
				logger.error(`[${My_Func._getDateTime()}],
				[–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø - bot.catch],
				[–ù–µ –º–æ–≥—É –ø–æ–¥—Å–æ–∫–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¢–µ–ª–µ–≥—Ä–∞–º–º: ${e}]`)
		} else {
				logger.error(`[${My_Func._getDateTime()}],
				[–§–ê–ô–õ - INDEX.JS], [–§–£–ù–ö–¶–ò–Ø - bot.catch],
				[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ${e}]`)
		}
})
bot.start()
start()



