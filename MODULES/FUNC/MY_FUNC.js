// const {User} = require("../BTN_KEYBORDS/USER");
// const {Files} = require("../FILES/FILES");
const {logger} = require("../LOGGER/LOGGER");
const {InputFile, Keyboard} = require("grammy");
const {File_Func} = require("../FILES/FILES_FUNC");
const {Op, Sequelize, fn} = require("sequelize");
const {scheduleNextRecurrence} = require("node-schedule/lib/Invocation");

// const {e} = require("../EVENT/global");

async function _getStatistic(ctx, table) {
		try {
				let act = 0
				let pas = 0
				const rec = await table.findAll()
				for (let i of rec)
						if (i.dataValues.active) act++
						else pas++
				ctx.reply(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - ${act}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è —É–¥–∞–ª–∏–ª–∏ - ${pas}`)
		} catch (e) {
				logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - MY_FUNC.JS], [–§–£–ù–ö–¶–ò–Ø -_getStatistic],
        err - ${e}`)
		}
}

async function _sendNews(msg, externalData) {
		try {
				let rec = await externalData.TABLE_USERS.findAll()

				for (let i in rec) {
						if (rec[i].active == false) {
								rec[i].active = true
								await rec[i].save()
						}
						try {
								await externalData.BOT.api.sendMessage(rec[i].user_id, msg, {
										"reply_markup": {
												// 		"keyboard": [["Sample text", "Second sample"],   ["Keyboard"], ["I'm robot"]]
												"keyboard": externalData.MENU.get(+rec[i].user_id).KEYBOARD_STACK.at(-1),
												"resize_keyboard": true,//https://core.telegram.org/bots/api#replykeyboardmarkup
												"is_persistent": true,
										},
										"disable_notification": true,
								});
						} catch (e) {
								rec[i].active = false
								await rec[i].save()
								externalData.MENU.delete(+rec[i].user_id)
						}
				}
		} catch (e) {
				logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - MY_FUNC.JS], [–§–£–ù–ö–¶–ò–Ø -_sendNews],
        err - ${e}`)
		}
}

async function _sendMsgToUser(bot, msg, table) {
		const adminID = JSON.parse(process.env.BOT_ADMIN)//—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è
		const obj = {
				id: 0,
				msg: msg
		}
		if (__getFirstNumberFromMessage(obj)) {
				try {
						let rec = await table.findAll()

						for (let i in rec) {
								if (rec[i].user_id == obj.id) {
										try {
												await bot.api.sendMessage(rec[i].user_id, obj.msg)
										} catch (e) {
												await bot.api.sendMessage(adminID[0], `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –±–æ—Ç–∞`)
										}
										return
								}
						}
						await bot.api.sendMessage(adminID[0], `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id - ${obj.id}`)
				} catch (e) {
						logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - MY_FUNC.JS], [–§–£–ù–ö–¶–ò–Ø -_sendMsgToUser],
        err - ${e}`)
				}
		}
}

function __getFirstNumberFromMessage(obj) {
		// –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
		// const words = obj.msg.split(/[\s.,!?]+/);
		const words = obj.msg.split(' ');

		// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É
		for (let i = 0; i < words.length; i++) {
				// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ –≤ —á–∏—Å–ª–æ
				let number = parseFloat(words[i]);
				if (!isNaN(number)) {
						let numberTmp = number.toFixed(0);//–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å
						const amountDigits = numberTmp.toString().length;
						if (amountDigits === 10 || amountDigits === 9) {//id —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 –∏–ª–∏ 10 —Ü–∏—Ñ—Ä
								obj.id = numberTmp;
								let pos = obj.msg.indexOf(numberTmp);
								if (pos !== -1) obj.msg = obj.msg.replace(numberTmp, '');
						}
				}
				if (obj.id != 0) return 1
		}
		return 0
}


// –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –¥–∞—Ç–∞ - –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–¥—É
const _compareDate = (dateDeadLine) => {
		if (dateDeadLine == null) return 0
		let arr = __prepareDate(dateDeadLine)
		if (arr.length !== 8) return 0

		// let reversDateDeadLine = [arr.splice(-4).join(''), arr.splice(-2).join(''), arr.splice(-2).join('')].join('-');
		let DateDeadLine = [arr.splice(0, 2).join(''), arr.splice(0, 2).join(''), arr.splice(0, 4).join('')].join('-');

		const date2 = _convertStringToDate(DateDeadLine)

		if (date2 == 'Invalid Date') return 0

		const dateNow = new Date()
		const dateNow1 = new Date(dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate());


		if (date2 - dateNow1 === 0) return 2
		else if (date2 < dateNow1) return 1
		else if (date2 > dateNow1) return -1
		else return 0
}

function _prepareDateToShow(dateString) {
		let arr = __prepareDate(dateString)
		if (arr.length !== 8) return 0
		const year = arr.splice(-4).join('')
		const month = arr.splice(2).join('')
		const day = arr.splice(-2).join('')
		let dateCheck = new Date([year, month, day].join('-'));
		return dateCheck.toISOString().slice(0, 10).split('-').reverse().join('-')
}

function __prepareDate(dateString) {
		const arr = dateString.split('')
		const filteredArr = arr.filter(item => __isDigit(item));
		return filteredArr
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–æ–π
function __isDigit(char) {
		return char >= '0' && char <= '9';
}


const dataOptions = {
		// era: 'long',
		year: 'numeric',
		month: 'long',
		day: 'numeric',
		weekday: 'long',
		timezone: 'UTC',
		hour: 'numeric',
		minute: 'numeric',
		second: 'numeric'
}

function _getDateTime() {
		try {
				return new Date().toLocaleString("ru", dataOptions)
		} catch (e) {
				logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - MY_FUNC.JS], [–§–£–ù–ö–¶–ò–Ø - _getDateTime],
        err - ${e}`)
		}
}

function _getDate() {
		// return new Date().toISOString().slice(0, 10).split('-').reverse().join('-')
		const dateNow = new Date()
		const day = dateNow.getDate()
		let month = (dateNow.getMonth() + 1).toString()
		if (month.length === 1) month = '0' + month
		const year = dateNow.getFullYear()
		return `${day}.${month}.${year}`
}

function _getDateRevers() {
		return new Date().toISOString().slice(0, 10).split('-').join('-')
}


//
//
function _pad(s) {
		return ('00' + s).slice(-2)
}

function _getArrOfDatesBeforeNow() {
		let pastDate = new Date("2000-01-01")
		const now = new Date()
		const result = []

		while (pastDate.getTime() < now.getTime()) {
				result.push(pastDate.getFullYear() + '-' + _pad(pastDate.getMonth() + 1) + '-' + _pad(pastDate.getDate()));
				pastDate.setDate(pastDate.getDate() + 1);
		}
		return result
}

async function _getLocationBtn(ctx) {
		await ctx.reply('–Ø –ø–æ—Å–º–æ—Ç—Ä—é –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∏ –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É. –ü—Ä–∏—à–ª—é –≤–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ –Ω–µ—ë' +
				', –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è–Ω–¥–µ–∫—Å –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∞–≤—Ç–æ–±—É—Å–∞. ' +
				'–ö–Ω–æ–ø–∫–∞' +
				'\nüìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—éüìç' +
				'\n–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –≤–∞—à–µ–≥–æ —ç–∫—Ä–∞–Ω–∞', {
				reply_markup: {
						keyboard: [[{
								text: 'üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—éüìç',
								request_location: true,
						}]],
						resize_keyboard: true,
				},
				is_persistent: true,
		})
}

function _isTheSameDay(date1, date2) {
		return date1.getDate() === date2.getDate() &&
				date1.getMonth() === date2.getMonth() &&
				date1.getFullYear() === date2.getFullYear()
}

async function _helpUser(ctx, pathMp4, caption, pathTxt) {
		await ctx.replyWithVideo(new InputFile(pathMp4)
				, {caption: caption})
		await File_Func._sendMsgFromFile(pathTxt, ctx)
}

const arrUserMessages = ['1', '3', '5', '101', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ—Ä',
		'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–æ–º–µ—Ä', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 3', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 5', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 101',
		'–º–∞—Ä—à—Ä—É—Ç', '–º–∞—Ä—à—Ä—É—Ç –Ω–æ–º–µ—Ä', '–º–∞—Ä—à—Ä—É—Ç 1', '–º–∞—Ä—à—Ä—É—Ç 3', '–º–∞—Ä—à—Ä—É—Ç 5',
		'–º–∞—Ä—à—Ä—É—Ç 101']

function __levenshteinDistance(s1, s2) {
		let len1 = s1.length;
		let len2 = s2.length;
		let col = [];

		for (let i = 0; i <= len1; i++) col[i] = [];
		col[0][0] = 0;
		for (let i = 1; i <= len1; i++) col[i][0] = i;
		for (let j = 1; j <= len2; j++) col[0][j] = j;
		for (let i = 1; i <= len1; i++) {
				for (let j = 1; j <= len2; j++) {
						if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
								col[i][j] = col[i - 1][j - 1];
						} else {
								col[i][j] = Math.min(col[i - 1][j], // —É–¥–∞–ª–µ–Ω–∏–µ
										col[i][j - 1], // –≤—Å—Ç–∞–≤–∫–∞
										col[i - 1][j - 1]) + 1; // –∑–∞–º–µ–Ω–∞ –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∞
						}
				}
		}
		return col[len1][len2];
}

function _isCloseInContent(text, userMessages, maxDistance) {
		let closeMatches = [];
		for (let message of userMessages) {
				let distance = __levenshteinDistance(text.toLowerCase(), message);
				if (distance <= maxDistance) {
						closeMatches.push({message, distance});
				}
		}
		return closeMatches.length > 0 ? closeMatches : null;
}

function _convertStringToDate(dateString) {
		// –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥
		const parts = dateString.split('-');
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —á–∏—Å–ª–æ
		const day = parseInt(parts[0], 10);
		const month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0 –≤ –æ–±—ä–µ–∫—Ç–µ Date
		const year = parseInt(parts[2], 10);
		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date
		const dateObject = new Date(year, month, day, 0, 0, 0);
		return dateObject
}

async function _changeKeyboad(ctx) {
		const labels = [
				"Yes, they certainly are",
				"I'm not quite sure",
				"No. üòà",
		];
		const buttonRows = labels
				.map((label) => [Keyboard.text(label)]);
		const keyboard = Keyboard.from(buttonRows).resized();
		await ctx.reply('–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø',
				{
						reply_markup: keyboard,
				}
		)
}//—Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è

function _getAllProperties(obj) {
		const arrProp = [];
		for (let property in obj)
				if (obj.hasOwnProperty(property))
						arrProp.push(property);
		return arrProp;
}

function _isDateInArray(date, array) {
		for (let i of array)
				if (i - date === 0)
						return true;
}

async function _getSchedule(externalData, minutes = 60, flagWestEast = true) {
		try {
				let msg = ''
				const startTime = new Date();
				// startTime.setDate(startTime.getDate() + 1)//—É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
				// startTime.setHours(0)//—É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
				// startTime.setMinutes(20)//—É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

				const endOfDay = new Date(startTime);//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ –ø—É—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å  —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
				endOfDay.setDate(startTime.getDate() + 1)//–Ω–∞ —Å—É—Ç–∫–∏ –≤–ø–µ—Ä–µ–¥ –ø–æ—Å–º–æ—Ç—Ä—é –µ—Å–ª–∏ —á—Ç–æ
				const endTime = new Date(startTime.getTime() + 20 * minutes * 60 * 1000)//–æ—Ç –±–∞–ª–¥—ã –ø–æ—Å—Ç–∞–≤–∏–ª 24 —á–∞—Å–∞ +-
				const beforeTime = new Date(startTime.getTime() - minutes * 60 * 1000)

				let isRecAfterStartTime = await externalData.YEAR_SCHEDULES.findOne({
						where: {
								date: {
										[Op.between]: [startTime, endOfDay],
								}
						},
						raw: true,
				})//–ü–æ—Å–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å
				if (isRecAfterStartTime === null) return null
// –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—á—Ç–æ–±—ã –Ω–∞ —Å–µ—Ä–≤–∞–∫–µ –Ω–µ –±—ã–ª–æ –≥–ª—é–∫–æ–≤)
				msg += '\n' + `–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ ${startTime.toLocaleDateString('ru-RU', {
						day: 'numeric',
						month: 'numeric',
						year: 'numeric'
				})}  ${startTime.toLocaleTimeString('ru-RU', {hour12: false})}.` + '\n'

				await __isDayOff(startTime, externalData.DAY_OFF) ? msg += '–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å.' + '\n' : msg += '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å.' + '\n'

				//–°–ü–ò–°–û–ö ‚Ññ1 –ë–õ–ò–ñ–ê–ô–®–ò–ô –ê–í–¢–û–ë–£–°–û–í
				const list_1 = await externalData.YEAR_SCHEDULES.findAll({//https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
						attributes: ['bus', 'start', [fn('min', Sequelize.col('date')), 'date']],
						group: ['bus', 'start'],
						raw: true,
						order: [["bus", "ASC"]],//—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
						where: {
								date: {
										[Op.between]: [startTime, endTime],
								},
								west_to_east: flagWestEast,
						},
				})

				let arrId = []
				if (list_1)
						for (let i of list_1)
								arrId.push(...await __getArrId(list_1, externalData.YEAR_SCHEDULES))

				//–§–û–†–ú–ò–†–£–ï–ú –°–ü–ò–°–û–ö ‚Ññ2 –°–õ–ï–î–£–Æ–©–ò–• –ó–ê –°–õ–ï–î–£–Æ–©–ò–ú–ò –ê–í–¢–û–ë–£–°–ê–ú–ò
				const list_2 = await externalData.YEAR_SCHEDULES.findAll({//https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
						attributes: ['bus', 'start', [fn('min', Sequelize.col('date')), 'date']],
						// group: ['bus', 'start', 'day_off', 'west_to_east'],
						group: ['bus', 'start'],
						raw: true,
						order: [["bus", "ASC"]],//—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
						where: {
								date: {
										[Op.between]: [startTime, endTime],
								},
								west_to_east: flagWestEast,
								id: {
										[Op.notIn]: arrId,
								},
						},
				})

				//–ù–ê–ô–î–ï–ú –ö–ê–ö–ò–ï –ë–´–õ–ò –°–ê–ú–´–ï –ü–û–°–õ–ï–î–ù–ò–ï –ê–í–¢–û–ë–£–°–´ –î–û –¢–ï–ö–£–©–ï–ì–û –í–†–ï–ú–ï–ù–ò –ó–ê –ó–ê–î–ê–ù–ù–´–ô –ü–†–û–ú–ï–ñ–£–¢–û–ö –í–†–ï–ú–ï–ù–ò
				let list_3 = await externalData.YEAR_SCHEDULES.findAll({//https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
						attributes: ['bus', 'start', [fn('max', Sequelize.col('date')), 'date']],
						group: ['bus', 'start'],
						raw: true,
						order: [["bus", "ASC"]],//—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
						where: {
								date: {
										[Op.between]: [beforeTime, startTime],
								},
								west_to_east: flagWestEast,
						},
				})
//–ü–û–î–ì–û–¢–û–í–ò–ú –°–ü–ò–°–û–ö –ö –†–ê–°–ü–ï–ß–ê–¢–ö–ï
				let msgFromTable = __prepareMsg(list_3)
				if (msgFromTable == null)
						msg += '\n' + `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ  ${minutes} –º–∏–Ω. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.` + '\n'
				else {
						msg += '\n' + `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${minutes} –º–∏–Ω.`
						msg += msgFromTable
				}
				msg += '\n' + `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤:`
				msgFromTable = __prepareMsg(list_1)
				msg += msgFromTable
				msgFromTable = __prepareMsg(list_2)
				msg += msgFromTable + '\n'

				return msg //–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		} catch (e) {
				logger.error(`[${My_Func._getDateTime()}],
        [–§–ê–ô–õ - MY_FUNC.JS], [–§–£–ù–ö–¶–ò–Ø - _getSchedule],
        err - ${e}`)
		}
}


async function __isDayOff(dateNow, tableDayOff) {
		const countTodayDayOff = await tableDayOff.count({
				// const {countTodayDayOff, rows} = await tableDayOff.findAndCountAll({
				where: {
						date: dateNow,
				}
		})//—Å–º–æ—Ç—Ä–∏–º –≤—ã—Ö–æ–¥–Ω–æ–π —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–µ—Ç
		if (countTodayDayOff) return true
		else return false
}

async function __getArrId(recordList, tableSchedule) {
		const arrId = []
		for (let i of recordList) {
				const list_1_NextDay_ID = await tableSchedule.findOne({
						where: {
								date: i.date,
								bus: i.bus,
								// day_off: i.day_off,
								// west_to_east: i.west_to_east,
								start: i.start,
						}
				})//https://sequelize.org/docs/v6/core-concepts/model-querying-basics
				arrId.push(list_1_NextDay_ID?.id)
		}
		return arrId
}

async function __listBusesAdd(table, startTime, arrId, arrNumbers, nextDayOff, flagWestEast) {
		return await table.findAll({//https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
				attributes: ['bus', 'start', [fn('min', Sequelize.col('date')), 'date'], 'day_off', 'west_to_east'],
				group: ['bus', 'start', 'day_off', 'west_to_east'],
				raw: true,
				order: [["bus", "ASC"]],//—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
				where: {
						date: {
								[Op.lt]: startTime,
						},
						bus:
								{
										[Op.notIn]: arrNumbers

								},
						day_off: nextDayOff,
						west_to_east: flagWestEast,
						id:
								{
										[Op.notIn]: arrId,

								},
				}
		})
}

function __prepareMsg(recFromTable) {
		let msg = ''
		if (recFromTable.length != 0) msg += '\n' + '‚Ññ   ' + '  –í—Ä–µ–º—è  ' + '  –ù–∞—á–∞–ª–æ –¥–≤–∏–∂.' + '\n'
		else return null

		recFromTable.sort((a, b) => a.bus - b.bus)//—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

		let busString = ''
		let busStringModified = ''

		let timeString = ''
		let timeStringModified = ''

		for (let i in recFromTable) {
				let hours = recFromTable[i].date.getHours()
				let min = recFromTable[i].date.getMinutes().toString()
				if (min.length === 1) min = '0' + min
				let time = hours + ':' + min

				busString = recFromTable[i].bus.toString()
				busStringModified = busString.padEnd(busString.length + 9 - busString.length * 2, ' ')//–ø–æ–¥–≥–æ–Ω—è–µ–º —á—Ç–æ –±—ã —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —Ä–æ–≤–Ω–æ–π

				timeString = time.toString()
				timeStringModified = timeString.padEnd(timeString.length + 16 - timeString.length * 2, ' ')//–ø–æ–¥–≥–æ–Ω—è–µ–º —á—Ç–æ –±—ã —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —Ä–æ–≤–Ω–æ–π

				msg += busStringModified + timeStringModified + recFromTable[i].start + "\n"
		}
		return msg
}

const My_Func = {
		// clMenuFill,
		_getStatistic,
		_sendNews,
		_sendMsgToUser,
		__getFirstNumberFromMessage,
		_getDateTime,
		_getDate,
		_getArrOfDatesBeforeNow,
		_compareDate,
		_prepareDateToShow,
		_getLocationBtn,
		_helpUser,
		arrUserMessages,
		_isCloseInContent,
		_isTheSameDay,
		_convertStringToDate,
		_changeKeyboad,
		_getAllProperties,
		_isDateInArray,
		// _setPath,
		// _changeTraceFlag,
		// dataOptions,
		_getSchedule
}

module.exports.My_Func = My_Func