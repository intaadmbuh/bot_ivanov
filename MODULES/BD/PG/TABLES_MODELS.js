const {logger} = require("../../LOGGER/LOGGER");
const {DbConnect} = require('./PG_CONNECT')
const {DataTypes, Op} = require('sequelize')

const {My_Func} = require("../../FUNC/MY_FUNC");
// const {Table_Func} = require("./TABLES_FUNC");
const {File_Func} = require("../../FILES/FILES_FUNC");
// const {e} = require('../../EVENT/global')
//–¢–ê–ë–õ–ò–¶–´ –ú–ï–ù–Æ
const modelMenuDefine = {
		id: {type: DataTypes.BIGINT, primaryKey: true, unique: true, allowNull: false, autoIncrement: true},
		num: {type: DataTypes.BIGINT, unique: true, allowNull: true},
		cmd: {type: DataTypes.STRING, unique: true},
		code: {type: DataTypes.BIGINT, defaultValue: 0},
		date: {type: DataTypes.DATE, defaultValue: null},
		msg_text: {type: DataTypes.STRING},
		msg_exit: {type: DataTypes.STRING},
		file_intro: {type: DataTypes.STRING},
		file_text: {type: DataTypes.STRING},
}

const tableMenuMain = DbConnect.define('menu_main',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {
												if (record.num == 1) {
														record.cmd = 'üöå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
														record.msg_text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
														record.msg_exit = 'üëá'
												}
												if (record.num == 2) {
														record.cmd = '‚è±Ô∏è–ë–ª–∏–∂–∞–π—à–∏–π'
														record.msg_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞ –ø–æ –≥–æ—Ä–æ–¥—É. –° –∑–∞–ø–∞–¥–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫ –∏–ª–∏ —Å –≤–æ—Å—Ç–æ–∫–∞ –Ω–∞ –∑–∞–ø–∞–¥'
												}
												if (record.num == 3) {
														record.cmd = 'üìç –ì–¥–µ –∞–≤—Ç–æ–±—É—Å'
														record.msg_text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'
												}
												if (record.num == 4) {
														record.cmd = 'üîë'
														record.msg_text = '–†–∞–∑–Ω–æ–µ'
												}
												if (record.num == 5) {
														record.cmd = '‚ùó–û–ë–™–Ø–í–õ–ï–ù–ò–ï‚ùóÔ∏è'
														record.msg_text = '–•–æ—Ç–µ–ª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ...'
												}
												record.file_intro = `./src/pic/${tableMenuMain.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuMain.name}${record.num}.txt`
												// changeTablesMenuBottomFlag = true
										}

										if (record.msg_exit == null)
												record.msg_exit = '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" –∏–∑ –º–µ–Ω—é'

								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave on tableMenuMain],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuMain.destroy({
												where: {
														num: null,
												}
										})

										await tableMenuMain.destroy({
												where: {
														date: {
																[Op.lte]: new Date(),
														}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuMain],
										[err - ${e}]`)
								}
						},
						//	afterSave: async () => {
						// e.emit('test','–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω–∞')
						//	},//–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
						//afterDestroy: async () => {
						// e.emit('test', '–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ —É–¥–∞–ª–µ–Ω–∞')
						//},//–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã
				}
		}
);
//–ú–ï–ù–Æ –ë–õ–ò–ñ–ê–ô–®–ò–ô ...
const tableMenuNearest = DbConnect.define('menu_nearest',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {

												if (record.num == 1) {
														record.cmd = 'Ô∏èü§†‚û°Ô∏èüê™'
														record.msg_text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ó–ê–ü–ê–î–ê –ù–ê –í–û–°–¢–û–ö'
												}
												if (record.num == 2) {
														record.cmd = 'üê™‚û°Ô∏èü§†'
														record.msg_text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –í–û–°–¢–û–ö–ê –ù–ê –ó–ê–ü–ê–î'
												}

												record.file_intro = `./src/pic/${tableMenuMisc.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuMisc.name}${record.num}.txt`
										}

								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave on tableMenuMisc],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuMisc.destroy({
												where: {
														num: null,
												}
										})
										await tableMenuMisc.destroy({
												where: {
														date: {
																[Op.lte]: new Date(),
														}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuMisc],
										[err - ${e}]`)
								}
						},
				}
		}
);
//–ú–ï–ù–Æ –†–ê–ó–ù–û–ï ...
const tableMenuMisc = DbConnect.define('menu_misc',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {

												if (record.num == 1) {
														record.cmd = 'üìà –ú–∞—Ä—à—Ä—É—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è'
														record.msg_text = '–ú–∞—Ä—à—Ä—É—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è'
												}
												if (record.num == 2) {
														record.cmd = 'üé´ –ë–∏–ª–µ—Ç—ã'
														record.msg_text = '–í–∞—à –±–∏–ª–µ—Ç–∏–∫'
												}
												if (record.num == 3) {
														record.cmd = 'üÜò –ü–æ–º–æ—â—å'
														record.msg_text = '–ù–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å? –ë—ã–≤–∞–µ—Ç('
												}
												if (record.num == 4) {
														record.cmd = 'üè¶ –û –Ω–∞—Å'
														record.msg_text = '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'
												}

												record.file_intro = `./src/pic/${tableMenuMisc.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuMisc.name}${record.num}.txt`
										}

								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave on tableMenuMisc],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuMisc.destroy({
												where: {
														num: null,
												}
										})
										await tableMenuMisc.destroy({
												where: {
														date: {
																[Op.lte]: new Date(),
														}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuMisc],
										[err - ${e}]`)
								}
						},
				}
		}
);
//–ú–ï–ù–Æ –î–ï–ô–°–¢–í–£–Æ–©–ï–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø
const tableMenuSchedulesOld = DbConnect.define('menu_schedules_old',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {
												tableMenuSchedulesOld.name
												record.cmd = `–ú–∞—Ä—à—Ä—É—Ç ‚Ññ${record.num}`
												record.msg_text = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ${record.num}`
												record.file_intro = `./src/pic/${tableMenuSchedulesOld.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuSchedulesOld.name}${record.num}.txt`
												// await File_Func._createTxtFile(record.file_text, `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ${record.num}`)
										}
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave on tableMenuSchedulesOld],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuSchedulesOld.destroy({
												where: {
														num: null,
												}
										})
										await tableMenuSchedulesOld.destroy({
												where: {
														date: {
																[Op.lte]: new Date(),
														}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuSchedulesOld],
										[err - ${e}]`)
								}
						},
				}
		}
);
//–ú–ï–ù–Æ –ù–û–í–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø
const tableMenuSchedulesNew = DbConnect.define('menu_schedules_new',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {
												record.cmd = `‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç ‚Ññ${record.num}`
												record.msg_text = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ${record.num}`
												record.file_intro = `./src/pic/${tableMenuSchedulesNew.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuSchedulesNew.name}${record.num}.txt`
												// await File_Func._createTxtFile(record.file_text, `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ${record.num} c ${record.date.toLocaleString()}. –í—Ä–µ–º—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${My_Func._getDateTime()}`)
												const day = record.date.getDate()
												let month = (record.date.getMonth() + 1).toString()
												if (month.length === 1) month = '0' + month
												const year = record.date.getFullYear()
												await File_Func._createTxtFile(record.file_text, `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ${record.num}. –í–≤–æ–¥–∏—Ç—Å—è —Å ${day}.${month}.${year}`)
												await File_Func._removeDataFromFile('./src/pic/tmp.jpg', record.file_intro)//–ü–£–¢–¨ –ö –≠–¢–û–ú–£ –§–ê–ô–õ–£ –ü–†–û–ü–ò–°–ê–ù –í M_BTNS_FUNC.JS –í async function funcBtn3 –§–£–ù–ö–¶–ò–Ø –ü–†–ò–ï–ú–ê –§–ê–ô–õ–ê
										}
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave:on tableMenuSchedulesNew],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuSchedulesNew.destroy({
												where: {
														num: null,
												}
										})
										const recNewSchedules = await tableMenuSchedulesNew.findAll({
												where: {
														// date: {[Op.ne]: null}
														date: {[Op.lte]: new Date()}
												}
										})
										for (let i of recNewSchedules) {
												if (i.dataValues.code == 1) {
														const [recOldSchedules, created] = await tableMenuSchedulesOld.findOrCreate({
																where: {
																		num: i.dataValues.num
																}
														})
														await File_Func._removeDataFromFile(i.dataValues.file_intro, recOldSchedules.file_intro)
														await File_Func._removeDataFromFile(i.dataValues.file_text, recOldSchedules.file_text)
												}
												if (i.dataValues.code == 2)
														await tableMenuSchedulesOld.destroy({
																where: {
																		num: i.dataValues.num
																}
														})
										}
										await tableMenuSchedulesNew.destroy({
												where: {
														date: {[Op.lte]: new Date()}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuSchedulesNew],
										[err - ${e}]`)
								}
						},
				}
		}
);
//–ú–ï–ù–Æ –í–´–ë–û–†–ê –ú–ï–ñ–î–£ –î–ï–ô–°–¢–í–£–Æ–©–ò–ú –ò –ù–û–í–´–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú
const tableMenuSwitchOldNewSch = DbConnect.define('menu_switch_old_new_sch',
		modelMenuDefine, {
				hooks: {
						beforeSave: async (record) => {
								try {
										if (record.num != null) {
												if (record.num == 1) {
														record.cmd = `üöå –î–µ–π—Å—Ç–≤—É—é—â–µ–µ`
														record.msg_text = `–î–µ–π—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ`;
												}
												if (record.num == 2) {
														record.cmd = `‚ö†Ô∏è –ù–æ–≤–æ–µ`
														record.msg_text = `–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ`;
												}
												record.file_intro = `./src/pic/${tableMenuSwitchOldNewSch.name}${record.num}.jpg`
												record.file_text = `./src/text/${tableMenuSwitchOldNewSch.name}${record.num}.txt`
												await File_Func._createTxtFile(record.file_text, '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª')
										}
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeSave:on tableMenuSwitchOldNewSch],
										[err - ${e}]`)
								}
						},
						beforeCount: async () => {
								try {
										await tableMenuSwitchOldNewSch.destroy({
												where: {
														num: null,
												}
										})
										await tableMenuSwitchOldNewSch.destroy({
												where: {
														date: {
																[Op.lte]: new Date(),
														}
												}
										})
								} catch
										(e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook beforeCount: on tableMenuSwitchOldNewSch],
										[err - ${e}]`)
								}
						},
				}
		}
);

//–¢–ê–ë–õ–ò–¶–ê –° –î–ê–ù–ù–´–ú–ò –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
const tableUsers = DbConnect.define('users', {
		user_id: {type: DataTypes.BIGINT, primaryKey: true, unique: true},
		active: {type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true},
		first_name: {type: DataTypes.STRING},
		last_name: {type: DataTypes.STRING},
		telephone: {type: DataTypes.STRING},
		coordinate: {type: DataTypes.STRING},
		email: {type: DataTypes.STRING},
		real_first_name: {type: DataTypes.STRING},
		real_last_name: {type: DataTypes.STRING},
		address: {type: DataTypes.STRING},
		language_code: {type: DataTypes.STRING},
})
//–¢–ê–ë–õ–ò–¶–ê –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
const tableUsersBlackList = DbConnect.define('users_black_list', {
				user_id: {type: DataTypes.BIGINT, primaryKey: true, unique: true},
				active: {type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true},
				first_name: {type: DataTypes.STRING},
				last_name: {type: DataTypes.STRING},
				telephone: {type: DataTypes.STRING},
				coordinate: {type: DataTypes.STRING},
				email: {type: DataTypes.STRING},
				real_first_name: {type: DataTypes.STRING},
				real_last_name: {type: DataTypes.STRING},
				address: {type: DataTypes.STRING},
				language_code: {type: DataTypes.STRING},
		},
		{
				hooks: {
						beforeCount: async () => {
								try {
										await tableUsersBlackList.destroy({
												where: {
														createdAt: {[Op.lt]: new Date(new Date() - process.env.DAYS_IN_BLACK_LIST * 24 * 60 * 60 * 1_000)},//https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
														// createdAt: {[Op.lt]: new Date(new Date() - 2 * 60 * 1000)},
												}
										})
								} catch (e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook on tableUsersBlackList],
										[–û–®–ò–ë–ö–ê –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê]
										[err - ${e}]`)
								}
						}
				}
		})
//–¢–ê–ë–õ–ò–¶–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ú–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
const tableUsersMsg = DbConnect.define('users_msg', {
				user_id: {type: DataTypes.BIGINT, allowNull: false},
				msg: {type: DataTypes.STRING},
				update_id: {type: DataTypes.BIGINT, allowNull: false},
				message_id: {type: DataTypes.BIGINT, allowNull: false,},
		},
		{
				hooks: {
						afterSave: async (record) => {
								try {
										let {count, rows} = await tableUsersMsg.findAndCountAll({
												where: {
														user_id: record.user_id
												}
										})
										if (count > 300) {
												const rec = await tableUsersMsg.findAll({
														where: {
																user_id: record.user_id
														}
												})
												let min = rec[0].updatedAt
												let index = 0
												if (rec == null) {
												} else {
														let min = rec[0].updatedAt
														for (let jsonKey in rec)
																if (rec[jsonKey].updatedAt < min) {
																		min = rec[jsonKey].updatedAt
																		index = jsonKey
																}
												}
												await tableUsersMsg.destroy({
														where: {
																updatedAt: min,
																user_id: rec[index].user_id
														}
												})
												if (count > 1000) {
														await tableUsersMsg.destroy({
																where: {
																		user_id: record.user_id
																}
														})
												}
										}
								} catch (e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook on tableUsersMsg],
										[err - ${e}]`)
								}
								try {
										if (!process.env.BOT_ADMIN.includes(record.user_id)) {
												const now = new Date()
												now.setUTCHours(0, 0, 0, 0)
												const startDay = now
												const endDay = new Date(now.getTime() + 24 * 60 * 60 * 1000)
												let {count, rows} = await tableUsersMsg.findAndCountAll({
														where: {
																user_id: record.user_id,
																createdAt: {
																		[Op.between]: [startDay, endDay]
																}
														}
												})

												if (count > process.env.MSG_MAX_COUNT) {
														const [rec, created] = await tableUsersBlackList.findOrCreate({
																where: {
																		user_id: record.user_id,
																}
														})
												}
										}
								} catch (e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook on tableUsersMsg],
										[–°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π],
										[err - ${e}]`)
								}
						}
				}
		})
//–¢–ê–ë–õ–ò–¶–ê –ü–û–î–°–ß–ï–¢–ê –ù–ê–ñ–ê–¢–ò–ô –ö–õ–ê–í–ò–®
const tableCountCmd = DbConnect.define('count_cmd', {
		user_id: {type: DataTypes.BIGINT, allowNull: false},
		msg: {type: DataTypes.STRING},
		i: {type: DataTypes.BIGINT, defaultValue: 0},
})
//–¢–ê–ë–õ–ò–¶–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –õ–û–ö–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ö–ê–ö–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –†–Ø–î–û–ú –° –ù–ò–ú
const tableUsersLoc = DbConnect.define('users_loc', {
				user_id: {type: DataTypes.BIGINT, allowNull: false},
				bus_stop: {type: DataTypes.STRING},
				minDist: {type: DataTypes.FLOAT},
				latitude: {type: DataTypes.FLOAT},
				longitude: {type: DataTypes.FLOAT},
				update_id: {type: DataTypes.BIGINT, allowNull: false},
				message_id: {type: DataTypes.BIGINT, allowNull: false,},
		},
		{
				hooks: {
						afterSave: async (record) => {
								try {
										let {count, rows} = await tableUsersLoc.findAndCountAll({
												where: {
														user_id: record.user_id
												}
										})
										if (count > 300) {
												const rec = await tableUsersLoc.findAll({
														where: {
																user_id: record.user_id
														}
												})
												let min = rec[0].updatedAt
												let index = 0
												if (rec == null) {
												} else {
														let min = rec[0].updatedAt
														for (let jsonKey in rec)
																if (rec[jsonKey].updatedAt < min) {
																		min = rec[jsonKey].updatedAt
																		index = jsonKey
																}
												}
												await tableUsersLoc.destroy({
														where: {
																updatedAt: min,
																user_id: rec[index].user_id
														}
												})
												if (count > 1000) {
														await tableUsersLoc.destroy({
																where: {
																		user_id: record.user_id
																}
														})
												}
										}
								} catch (e) {
										logger.error(`[${My_Func._getDateTime()}],
										[–§–ê–ô–õ - TABLES_MODELS.JS], [–§–£–ù–ö–¶–ò–Ø -hook on tableUsersLoc],
										[err - ${e}]`)
								}
						}
				}
		})


tableUsers.hasMany(tableUsersMsg, {onDelete: "cascade"})
tableUsers.hasMany(tableCountCmd, {onDelete: "cascade"})
tableUsers.hasMany(tableUsersLoc, {onDelete: "cascade"})

//–¢–ê–ë–õ–ò–¶–ê –ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
const tableAdminPanelBtns = DbConnect.define('admin_panel_btns', {
		num: {type: DataTypes.BIGINT, primaryKey: true, unique: true},
		caption: {type: DataTypes.STRING},
		result: {type: DataTypes.STRING, defaultValue: null},
		press: {type: DataTypes.BOOLEAN, allowNull: false, defaultValue: false},
		visible: {type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true},
		msg: {type: DataTypes.STRING},
		isEndOfLine: {type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true},
})
//–¢–ê–ë–õ–ò–¶–ê –í–´–•–û–î–ù–´–• –î–ù–ï–ô
const tableDayOff = DbConnect.define('day_off', {
		id: {type: DataTypes.BIGINT, primaryKey: true, unique: true, allowNull: false, autoIncrement: true},
		date: {type: DataTypes.DATEONLY, allowNull: false},
		week_day: {type: DataTypes.STRING, allowNull: false},
})
//–¢–ê–ë–õ–ò–¶–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ê–í–¢–û–ë–£–°–û–í
const tableSchedules = DbConnect.define('schedules', {
		id: {type: DataTypes.BIGINT, primaryKey: true, unique: true, allowNull: false, autoIncrement: true},
		// date: {type: DataTypes.TIME(6), allowNull: false},
		date: {type: DataTypes.DATE, allowNull: false},
		bus: {type: DataTypes.BIGINT, allowNull: false},
		day_off: {type: DataTypes.BOOLEAN, allowNull: false},
		exit: {type: DataTypes.BIGINT, allowNull: true},
		start: {type: DataTypes.STRING, allowNull: false},
		west_to_east: {type: DataTypes.BOOLEAN, allowNull: false},
		next_day: {type: DataTypes.BOOLEAN, allowNull: false},
		last_bus: {type: DataTypes.BOOLEAN, allowNull: false},
})
const tableYearSchedules = DbConnect.define('schedules_year', {
		id: {type: DataTypes.BIGINT, primaryKey: true, unique: true, allowNull: false, autoIncrement: true},
		date: {type: DataTypes.DATE, allowNull: false},
		bus: {type: DataTypes.BIGINT, allowNull: false},
		exit: {type: DataTypes.BIGINT, allowNull: true},
		start: {type: DataTypes.STRING, allowNull: false},
		west_to_east: {type: DataTypes.BOOLEAN, allowNull: false},
		week_day: {type: DataTypes.STRING, allowNull: false},
		day_off: {type: DataTypes.BOOLEAN, allowNull: false},
		last_bus: {type: DataTypes.BOOLEAN, allowNull: false},
})

// this.isEndOfLine = isEndOfLine


const TablesModels = {
		USERS: tableUsers,
		BLACK_LIST: tableUsersBlackList,
		MSG: tableUsersMsg,
		LOC: tableUsersLoc,

		MENU_MAIN: tableMenuMain,
		MENU_SCHEDULE_OLD: tableMenuSchedulesOld,
		MENU_SCHEDULE_NEW: tableMenuSchedulesNew,
		MENU_SW_OLD_NEW_SCH: tableMenuSwitchOldNewSch,
		MENU_MISC: tableMenuMisc,
		MENU_NEAREST: tableMenuNearest,
		DAY_OFF: tableDayOff,

		COUNT: tableCountCmd,

		ADMIN_PANEL_BTNS: tableAdminPanelBtns,

		SCHEDULES: tableSchedules,
		YEAR_SCHEDULES: tableYearSchedules,
}
module.exports.TablesModels = TablesModels

